//require google from googleapis and html-to-text
//const { response } = require('express');
const {google} = require('googleapis');
const { convert } = require('html-to-text');


//Async function to get the email summary
//Takes as inputs a gmail object (oauth2 client) and an array of message detail objects containing
    // id: '',
    // threadID: '',
    // from: '',
    // to: '',
    // date: '',
    // subject: '',
    // snippet: '',
    // labels: [] 

async function getGMailContent(gmail, messageID) {

    //Try to get the emails from the user's gmail account
    try {
        //Reconfigure to take only one email, not an array of emails
        const gmResponse = await gmail.users.messages.get({
            userId: 'me',
            id: messageID,
        });
        
        //Deconstruct the email and return it
        return deconstructGmail(gmResponse);
        
    } catch (err) {
        console.log('Error getting emails: ', err);

        return err;
    }
}

//Create a deconstructor function to place the email components into a JSON object for easy access. 
//Return the JSON object (email)
function deconstructGmail(gmResponse) {
    //create a JSON object to store two items for each email: the headers & the body text
    
    const email = {
        id: '',
        threadID: '',
        labels: [],
        snippet: '',
        headers: {
            from: '',
            to: '',
            date: '',
            subject: '',
        },
        bodyFull: {
            htmlText: '',
            plainText: '',
        },
        bodyAbbreviated: {
            sourceAbv: '',
            plainTextAbv: '',
        }
    };

    //Add the email identifiers and labels to the JSON object (id, threadID, labels) from message
    //These are the same for each email
    email.id = gmResponse.data.id;
    email.threadID = gmResponse.data.threadId;
    email.labels = gmResponse.data.labelIds;
    email.snippet = gmResponse.data.snippet.replace(/&#39;/g, "'");
    email.headers.from = gmResponse.data.payload.headers.find(header => header.name === 'From').value;
    email.headers.to = gmResponse.data.payload.headers.find(header => header.name === 'To').value;
    email.headers.date = gmResponse.data.payload.headers.find(header => header.name === 'Date').value;
    email.headers.subject = gmResponse.data.payload.headers.find(header => header.name === 'Subject').value;

    //Add the email body to the JSON object (bodyFull) from message. The data is located in different places depending on the email type.
    //So, we will use a switch statement to determine the appropriate body to add depending on email type.
    
    //Create switch statement to determine how to handle the email. Switch on gmResponse.data.payload.mimeType. Options are: 'text/html', 'multipart/alternative', 'multipart/related', 'multipart/mixed'. If the email is not one of these types, return an error.

    //Ultimately, I want to return the email part that is text/html as textHtmlBody
    let textHtmlBody;

    switch (gmResponse.data.payload.mimeType) {
      case 'text/html':
        textHtmlBody = gmResponse.data.payload.body;
        break;

      case 'multipart/alternative':
        textHtmlBody = gmResponse.data.payload.parts.find(part => part.mimeType === 'text/html').body;

        break;

      case 'multipart/related':
        textHtmlBody = gmResponse.data.payload.parts.find(part => part.mimeType === 'multipart/alternative').parts.find(part => part.mimeType === 'text/html').body;

        break;

      case 'multipart/mixed':
        textHtmlBody = gmResponse.data.payload.parts.find(part => part.mimeType === 'multipart/related').parts.find(part => part.mimeType === 'multipart/alternative').parts.find(part => part.mimeType === 'text/html').body;

        break;

      default:
        return {
          data: 'Error: Email is not a valid type',
          size: 0
        };
  }


    //dencode the Base64 body of the email (path 'message.data.payload.parts[1].body.data')
    //place into bodyFull object
    
    email.bodyFull.htmlText = decodeBody(textHtmlBody.data);
    email.bodyFull.plainText = decodeBody(textHtmlBody.data);

    //split bodyFull.htmlText on first instance of '<br>' and place first part into bodyAbbreviated.htmlTextabv 
    //convert from html and place in bodyAbbreviated.plainTextabv
    email.bodyAbbreviated.sourceAbv = email.bodyFull.htmlText.split('<div class="gmail_quote">')[0];
    email.bodyAbbreviated.plainTextAbv = convertHTMLBody(email.bodyAbbreviated.sourceAbv);

    //in .plainTextAbv, replace all instances of '\n' with ' '
    email.bodyAbbreviated.plainTextAbv = email.bodyAbbreviated.plainTextAbv.replace(/\n/g, ' ');

    return email;
}

//Create a function that decodes the email body from base64 to UFT-8 text
function decodeBody(body) {
    let decodedBody = '';

    try {
        //decode the body from base64 to UFT-8 text
        decodedBody = Buffer.from(body, 'base64').toString('utf8');
    } catch (err) {
        decodedBody = 'Error decoding body: ' + err;
    }

    return decodedBody;
}

//Create a function to convert the email body from HTML to plain text
function convertHTMLBody(html) {
    let plainText = '';

    try {
        plainText = convert(html, {
            selectors: [
                { selector: 'img', format: 'skip' },
                { selector: 'a', format: 'skip' }
            ],
            wordwrap: false
        }).replace(/&#39;/g, "'")
    } catch (err) {
        plainText = 'Error decoding body: ' + err;
    }

    return plainText;
}

module.exports = {
    getGMailContent,
};

/* Here is an example of the JSON object returned by the gmail.users.messages.get() function:

{
  "id": "18241afe2deec277",
  "threadId": "181f3306d3d212c0",
  "labelIds": [
    "SENT"
  ],
  "snippet": "Thanks, Giselle. Have you heard back from Kraig regarding feedback on the interview? Best! On Tue, Jul 26, 2022, 11:34 PM Giselle Yeung &lt;giselle.yeung@snowflake.com&gt; wrote: Glad to hear it! Yes,",
  "payload": {
    "partId": "",
    "mimeType": "multipart/alternative",
    "filename": "",
    "headers": [
      {
        "name": "MIME-Version",
        "value": "1.0"
      },
      {
        "name": "Date",
        "value": "Thu, 28 Jul 2022 05:03:40 +0700"
      },
      {
        "name": "References",
        "value": "\u003c62d82c2ac2593_2b91758327c@prod-greenhouse-prod-s2-web-79fcb8fcf5-vzws2.mail\u003e \u003cCAEu9ZSrbry3w9mqcjy661zXgFuD0LK9Oo7sk9JKY2Mby8pmBgA@mail.gmail.com\u003e \u003cCAEu9ZSptWudqhXpfDVQUo8tW-7+AU4dFMc3au3we_DKzKL_m_g@mail.gmail.com\u003e \u003cCAJVf0aKSpD6hOH7LSzWLZZCM11KJYu3r6-MFPZYmjftgtAAa2w@mail.gmail.com\u003e \u003cCAEu9ZSpjTKNCZRw7hV_asiJkPysxOXgno0eHJr2EBP_94fPPAQ@mail.gmail.com\u003e \u003cCAJVf0aLjAPAmAn1HSYbWVogHjDB7vK8qqi+_F_JBbN+DE9Fuhw@mail.gmail.com\u003e"
      },
      {
        "name": "In-Reply-To",
        "value": "\u003cCAJVf0aLjAPAmAn1HSYbWVogHjDB7vK8qqi+_F_JBbN+DE9Fuhw@mail.gmail.com\u003e"
      },
      {
        "name": "Message-ID",
        "value": "\u003cCAEu9ZSrBPRfWx0tO=x09_p_1D=P_3=PAAuBWWLt21hS=Gm_Mnw@mail.gmail.com\u003e"
      },
      {
        "name": "Subject",
        "value": "Re: Snowflake | Virtual Interview Availability | Account Executive, SMB"
      },
      {
        "name": "From",
        "value": "William Schober \u003cwilliam@flanagan-schober.com\u003e"
      },
      {
        "name": "To",
        "value": "Giselle Yeung \u003cgiselle.yeung@snowflake.com\u003e"
      },
      {
        "name": "Content-Type",
        "value": "multipart/alternative; boundary=\"00000000000011cffd05e4d0979e\""
      }
    ],
    "body": {
      "size": 0
    },
    "parts": [
      {
        "partId": "0",
        "mimeType": "text/plain",
        "filename": "",
        "headers": [
          {
            "name": "Content-Type",
            "value": "text/plain; charset=\"UTF-8\""
          },
          {
            "name": "Content-Transfer-Encoding",
            "value": "quoted-printable"
          }
        ],
        "body": {
          "size": 6111,
          "data": ""
        }
      },
      {
        "partId": "1",
        "mimeType": "text/html",
        "filename": "",
        "headers": [
          {
            "name": "Content-Type",
            "value": "text/html; charset=\"UTF-8\""
          },
          {
            "name": "Content-Transfer-Encoding",
            "value": "quoted-printable"
          }
        ],
        "body": {
          "size": 17405,
          "data": ""
        }
      }
    ]
  },
  "sizeEstimate": 26171,
  "historyId": "323632",
  "internalDate": "1658959420000"
}

*/